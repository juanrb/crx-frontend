//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions  } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ResultControllerClient'
export { Client };

export type ResultByBotIdResultControllerQueryParameters = {
  botId: string;
};

    
export function resultByBotIdUrl(botId: string): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/results/{botId}";
if (botId === undefined || botId === null)
  throw new Error("The parameter 'botId' must be defined.");
url_ = url_.replace("{botId}", encodeURIComponent("" + botId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let resultByBotIdDefaultOptions: UseQueryOptions<Types.Result, unknown, Types.Result> = {
  queryFn: __resultByBotId,
};
export function getResultByBotIdDefaultOptions(): UseQueryOptions<Types.Result, unknown, Types.Result> {
  return resultByBotIdDefaultOptions;
};
export function setResultByBotIdDefaultOptions(options: UseQueryOptions<Types.Result, unknown, Types.Result>) {
  resultByBotIdDefaultOptions = options;
}

export function resultByBotIdQueryKey(botId: string): QueryKey;
export function resultByBotIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { botId,  } = params[0] as ResultByBotIdResultControllerQueryParameters;

    return trimArrayEnd([
        'ResultControllerClient',
        'resultByBotId',
        botId as any,
      ]);
  } else {
    return trimArrayEnd([
        'ResultControllerClient',
        'resultByBotId',
        ...params
      ]);
  }
}
function __resultByBotId(context: QueryFunctionContext) {
  return Client.resultByBotId(
      context.queryKey[2] as string    );
}

export function useResultByBotIdQuery<TSelectData = Types.Result, TError = unknown>(dto: ResultByBotIdResultControllerQueryParameters, options?: UseQueryOptions<Types.Result, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
/**
 * @return The result records
 */
export function useResultByBotIdQuery<TSelectData = Types.Result, TError = unknown>(botId: string, options?: UseQueryOptions<Types.Result, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useResultByBotIdQuery<TSelectData = Types.Result, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Result, TError, TSelectData> | undefined = undefined;
  let botId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ botId,  } = params[0] as ResultByBotIdResultControllerQueryParameters);
      options = params[1];
    } else {
      [botId, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Result, TError, TSelectData>({
    queryFn: __resultByBotId,
    queryKey: resultByBotIdQueryKey(botId),
    ...resultByBotIdDefaultOptions as unknown as UseQueryOptions<Types.Result, TError, TSelectData>,
    ...options,
  });
}
/**
 * @return The result records
 */
export function setResultByBotIdData(queryClient: QueryClient, updater: (data: Types.Result | undefined) => Types.Result, botId: string) {
  queryClient.setQueryData(resultByBotIdQueryKey(botId),
    updater
  );
}

/**
 * @return The result records
 */
export function setResultByBotIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Result | undefined) => Types.Result) {
  queryClient.setQueryData(queryKey, updater);
}
    
    
export function updateUrl(id: number, botId: number, statusId: string): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/results/{botId}/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
if (botId === undefined || botId === null)
  throw new Error("The parameter 'botId' must be defined.");
url_ = url_.replace("{botId}", encodeURIComponent("" + botId));
if (statusId === undefined || statusId === null)
  throw new Error("The parameter 'statusId' must be defined.");
url_ = url_.replace("{statusId}", encodeURIComponent("" + statusId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateMutationKey(id: number, botId: number, statusId: string): MutationKey {
  return trimArrayEnd([
      'ResultControllerClient',
      'update',
      id as any,
      botId as any,
      statusId as any,
    ]);
}

/**
 * @param statusId New status Id
 * @return The result records
 */
export function useUpdateMutation<TContext>(id: number, botId: number, statusId: string, options?: Omit<UseMutationOptions<Types.Result, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Result, unknown, void, TContext> {
  const key = updateMutationKey(id, botId, statusId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
      return useMutation(() => Client.update(id, botId, statusId), {...options, mutationKey: key});
}
