//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions  } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './BotControllerClient'
export { Client };

export type BotByIdBotControllerQueryParameters = {
  id: string;
};

    
export function botUrl(): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/bot";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let botDefaultOptions: UseQueryOptions<Types.Bot[], unknown, Types.Bot[]> = {
  queryFn: __bot,
};
export function getBotDefaultOptions(): UseQueryOptions<Types.Bot[], unknown, Types.Bot[]> {
  return botDefaultOptions;
};
export function setBotDefaultOptions(options: UseQueryOptions<Types.Bot[], unknown, Types.Bot[]>) {
  botDefaultOptions = options;
}

export function botQueryKey(): QueryKey;
export function botQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'BotControllerClient',
      'bot',
    ]);
}
function __bot() {
  return Client.bot(
    );
}

/**
 * @return The bot records
 */
export function useBotQuery<TSelectData = Types.Bot[], TError = unknown>(options?: UseQueryOptions<Types.Bot[], TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useBotQuery<TSelectData = Types.Bot[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Bot[], TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Bot[], TError, TSelectData>({
    queryFn: __bot,
    queryKey: botQueryKey(),
    ...botDefaultOptions as unknown as UseQueryOptions<Types.Bot[], TError, TSelectData>,
    ...options,
  });
}
/**
 * @return The bot records
 */
export function setBotData(queryClient: QueryClient, updater: (data: Types.Bot[] | undefined) => Types.Bot[], ) {
  queryClient.setQueryData(botQueryKey(),
    updater
  );
}

/**
 * @return The bot records
 */
export function setBotDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Bot[] | undefined) => Types.Bot[]) {
  queryClient.setQueryData(queryKey, updater);
}
    
    
export function createUrl(label: string, type: string, rooms: string, priceMax: number, priceMin: number): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/bot";
if (label === undefined || label === null)
  throw new Error("The parameter 'label' must be defined.");
url_ = url_.replace("{label}", encodeURIComponent("" + label));
if (type === undefined || type === null)
  throw new Error("The parameter 'type' must be defined.");
url_ = url_.replace("{type}", encodeURIComponent("" + type));
if (rooms === undefined || rooms === null)
  throw new Error("The parameter 'rooms' must be defined.");
url_ = url_.replace("{rooms}", encodeURIComponent("" + rooms));
if (priceMax === undefined || priceMax === null)
  throw new Error("The parameter 'priceMax' must be defined.");
url_ = url_.replace("{priceMax}", encodeURIComponent("" + priceMax));
if (priceMin === undefined || priceMin === null)
  throw new Error("The parameter 'priceMin' must be defined.");
url_ = url_.replace("{priceMin}", encodeURIComponent("" + priceMin));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createMutationKey(label: string, type: string, rooms: string, priceMax: number, priceMin: number): MutationKey {
  return trimArrayEnd([
      'BotControllerClient',
      'create',
      label as any,
      type as any,
      rooms as any,
      priceMax as any,
      priceMin as any,
    ]);
}

/**
 * @param label label of the bot
 * @param type type of flat
 * @param rooms Quantity of rooms
 * @param priceMax Maximum price
 * @param priceMin Minimum price
 * @return The bot records
 */
export function useCreateMutation<TContext>(label: string, type: string, rooms: string, priceMax: number, priceMin: number, options?: Omit<UseMutationOptions<Types.Bot, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Bot, unknown, void, TContext> {
  const key = createMutationKey(label, type, rooms, priceMax, priceMin);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
      return useMutation(() => Client.create(label, type, rooms, priceMax, priceMin), {...options, mutationKey: key});
}
  
    
export function botByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/bot/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let botByIdDefaultOptions: UseQueryOptions<Types.Bot, unknown, Types.Bot> = {
  queryFn: __botById,
};
export function getBotByIdDefaultOptions(): UseQueryOptions<Types.Bot, unknown, Types.Bot> {
  return botByIdDefaultOptions;
};
export function setBotByIdDefaultOptions(options: UseQueryOptions<Types.Bot, unknown, Types.Bot>) {
  botByIdDefaultOptions = options;
}

export function botByIdQueryKey(id: string): QueryKey;
export function botByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id,  } = params[0] as BotByIdBotControllerQueryParameters;

    return trimArrayEnd([
        'BotControllerClient',
        'botById',
        id as any,
      ]);
  } else {
    return trimArrayEnd([
        'BotControllerClient',
        'botById',
        ...params
      ]);
  }
}
function __botById(context: QueryFunctionContext) {
  return Client.botById(
      context.queryKey[2] as string    );
}

export function useBotByIdQuery<TSelectData = Types.Bot, TError = unknown>(dto: BotByIdBotControllerQueryParameters, options?: UseQueryOptions<Types.Bot, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
/**
 * @return The bot records
 */
export function useBotByIdQuery<TSelectData = Types.Bot, TError = unknown>(id: string, options?: UseQueryOptions<Types.Bot, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useBotByIdQuery<TSelectData = Types.Bot, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.Bot, TError, TSelectData> | undefined = undefined;
  let id: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id,  } = params[0] as BotByIdBotControllerQueryParameters);
      options = params[1];
    } else {
      [id, options] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.Bot, TError, TSelectData>({
    queryFn: __botById,
    queryKey: botByIdQueryKey(id),
    ...botByIdDefaultOptions as unknown as UseQueryOptions<Types.Bot, TError, TSelectData>,
    ...options,
  });
}
/**
 * @return The bot records
 */
export function setBotByIdData(queryClient: QueryClient, updater: (data: Types.Bot | undefined) => Types.Bot, id: string) {
  queryClient.setQueryData(botByIdQueryKey(id),
    updater
  );
}

/**
 * @return The bot records
 */
export function setBotByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.Bot | undefined) => Types.Bot) {
  queryClient.setQueryData(queryKey, updater);
}
    
    
export function deleteUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/user/real-estate/bot/{id}";
if (id === undefined || id === null)
  throw new Error("The parameter 'id' must be defined.");
url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteMutationKey(id: string): MutationKey {
  return trimArrayEnd([
      'BotControllerClient',
      'delete',
      id as any,
    ]);
}

/**
 * @return The bot records
 */
export function useDeleteMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.Bot, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Bot, unknown, void, TContext> {
  const key = deleteMutationKey(id);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
      return useMutation(() => Client.delete_(id), {...options, mutationKey: key});
}
